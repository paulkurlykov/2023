// 1 - какое будет выведено значение

let a = 5;
alert(a++); // выведет 5, потому что сначала выводится ориг цифра, только потом работает инкремент
// alert(++a); // в этом случае выведет 6

// 2 - чему равно такое выражение

console.log([] + false - null + true); // NaN (ниже поэтапный разбор)

console.log(typeof ([] + false)); // false - string (потому что пустой массив идет как "". А если к нему прибавить любой тип данных, он будет приведен к строке. Результат - строка "false")
console.log(typeof ([] + false - null)); // NaN - number (null подразумевает число, но так как это не число, результат - NaN)
console.log(typeof ([] + false - null + true)); // NaN - number (число плюс любой тип данных кроме строки дает число, но у нас все равно не число, поэтому рез - NaN)

// 3 - что выведет этот код

let b = 5;
let c = (b = 2);
console.log(b); // 2 - простое последовательное присваивание

// 3 - чему равна сумма

let d = [] + 1 + 2;
console.log(typeof d, d); // 12 - но это string (сначала у пустой строке прибавляется 1, затем рядом встает 2)

// 4 - что выведет этот код

let e = '246'[1];
console.log(typeof e, e); // string "4". Потому что мы обратились к строке как к массиву, и запросили ее второй индекс (первый - 0). Она выдала нам второй символ, это 4)

// 5 - чему будет равно выражение

let f = 2 && 1 && null && 0 && undefined;
console.log(typeof f, f); // вернет null (при использовании оператора && он вернет первое значение, которое отвечает false. В нашем случае это null. Но при этом вернет именно значение, а не false )

// 6 - есть ли разница между двумя этими выражениями

console.log((1 && 2) === !!(1 && 2)); // false, они не равны.
console.log(1 && 2); // 2
console.log(!!(1 && 2)); // true (оператор !! приводит данныые к boolean)

// 7 - что выведет код

let g = null || (2 && 3) || 4; // смотреть таблицу приоритетов (ну в принципе туда погядывать)
console.log(typeof g, g); // выведет 3, потому что 1 - оператора || запинается на true. Первое трушное значение - в выражении с оператором &&. Внутри выражения с оператором && будет возвращаться последнее число (3).

// 8 - h == j ?
let h = [1, 2, 3];
let j = [1, 2, 3];

if (h == j) {
  // will show 'they are not equal', потому что хоть данные одинаковы, переменные разные. Это разные единицы.
  console.log(`they are equal`);
} else {
  console.log(`they are not equal`);
}

// 9 - что выведет код

console.log(+Infinity);
